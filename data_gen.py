import time
import pandas as pd
import re
import json

from openai import OpenAI

client = OpenAI(
    # This is the default and can be omitted
    api_key="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"
)


class tupe:
    def __init__(self, sentence='', labels=[]):
        self.sentence = sentence
        self.labels = labels

    def __str__(self):
        return f'{self.sentence}, {self.labels}'


# 调用OpenAI API生成填充了空白的句子
def generate_filled_sentences(tuples):
    # prompt_text = "Please generate a sentence with"
    #
    # # 填写情感标签
    # for label in sentiment_labels:
    #     prompt_text = (f"{prompt_text} a {label['polarity']} sentiment for the word '{label['term']}',")
    #
    # prompt_text = (
    #     f"{prompt_text} and the sentence should have the same meaning as the following sentence: '{base_sentence}'."
    #     f"example 1: "
    #     f"input: Please generate a sentence with a neutral sentiment for the word 'cord', a positive sentiment for the word 'battery life', "
    #     f"and the sentence should have the same meaning as the following sentence: 'I charge it at night and skip taking the cord with me because of the good battery life.'."
    #     f"output: Because the battery life is so good, I just charge it overnight and leave the cord behind."
    #     f"example 2: "
    #     f"input: Please generate a sentence with a negative sentiment for the word 'service center', a negative sentiment for the word 'sale team', a neutral sentiment for the word 'tech guy',"
    #     f"and the sentence should have the same meaning as the following sentence: 'The tech guy then said the service center does not do 1-to-1 exchange and I have to direct my concern to the \"sales\" team, which is the retail shop which I bought my netbook from.'."
    #     f"output: The tech guy then informed me that the service center does not offer 1-to-1 exchange, and I must address my concerns to the 'sales' team, which is the retail shop where I purchased my netbook."
    # )

    prompt_text = (
        "Defition: Receive a list, and for each element in the list, the element is a tuple of a string and a list, the string is the word, "
        "and the list is a dictionary with two keys: 'term' and 'polarity'."
        "and the polarity is a string with three possible values: 'positive', 'negative', 'neutral'. "
        "The function should return a list of strings, where each string is a sentence with the same meaning as the input sentence, and each term given by the 'term' key should have the sentiment given by the 'polarity' key, "
        "These sentence generated by the model maintain the keywords and sentiment labels unchanged while expressing the sentences differently. "
        "the output sentence should use \"\" rather than '' for quoting. "
        "If there is "" in the sentence, it should be escaped with \."
        "the number of sentences that the model generates should be the same as the number of input sentences. You can't miss any sentence."
        "The response should use json format."
        "The output must be a list of strings in python format and can be decoded by the following code and must not add any additional message."
        "Example: "
        
        "input: ["
        "{I charge it at night and skip taking the cord with me because of the good battery life.,"
        "[{'term': 'cord', 'polarity': 'neutral'}, {'term': 'battery life', 'polarity': 'positive'}]}"
        ", "
        "{The tech guy then said the service center does not do 1-to-1 exchange and I have to direct my concern to the \"sales\" team, which is the retail shop which I bought my netbook from.,"
        "[{'term': 'service center', 'polarity': 'negative'}, {'term': '\"sales\" team', 'polarity': 'negative'}, {'term': 'tech guy', 'polarity': 'neutral'}]}] "
        
        "output: {'sentences': ['Because the battery life is so good, I just charge it overnight and leave the cord behind.Because the battery life is so good, I just charge it overnight and leave the cord behind.', "
        "'The tech guy then informed me that the service center does not offer 1-to-1 exchange, and I must address my concerns to the \\\"sales\\\" team, which is the retail shop where I purchased my netbook.']} "
        "the example means that the first input sentence and the first output sentence have the same meaning with a neutral sentiment for the word 'cord', a positive sentiment for the word 'battery life',"
        "and the second input sentence and the second output sentence have the same meaning with a negative sentiment for the word 'service center', a negative sentiment for the word 'sale team', a neutral sentiment for the word 'tech guy'. "
        "The output sentence should be generated by the model, and must not be the same as the input sentence. "
        "The output must be a list of strings in python format and can be decoded by the following code and must not add any additional message."
        "Here are the wrong examples: "
        "example-1: "
        "input: [{it is of high quality, has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications, is easy to use, and is absolutely gorgeous.,"
        "[{'term': 'quality', 'polarity': 'positive'}, {'term': 'GUI', 'polarity': 'positive'}]}, "
        "{Easy to start up and does not overheat as much as other laptops.,"
        "[{'term': 'start up', 'polarity': 'positive'}]}] "
        "output: {'sentences': ['It is magnificent,  has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications,  is a breeze to use, and is absolutely stunning.', "
        "'Easy to get going and does not overheat as much as other laptops.']}"
        
        "In this example, the first output change the 'term' such as 'quality' to 'magnificent', 'applications' to 'applications', "
        "and the second output change the 'term' such as 'start up' to 'get going'. "
        "it breaks the rule that maintain the keywords and sentiment labels unchanged while expressing the sentences differently. "
        
        "example-2: "
        "input: [{it is of high quality, has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications, is easy to use, and is absolutely gorgeous.,"
        "[{'term': 'quality', 'polarity': 'positive'}, {'term': 'GUI', 'polarity': 'positive'}]}, "
        "{Easy to start up and does not overheat as much as other laptops.,"
        "[{'term': 'start up', 'polarity': 'positive'}]}] "
        "output: {'sentences': ['It is of high quality, has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications, is easy to use, and is absolutely gorgeous.', "
        "'Easy to start up and does not overheat as much as other laptops.']} "
        "In this example, it breaks the rule that the output must not be the same as the input sentence. you must generate a new sentence with the same meaning"
        "Here are the input sentences:"
    )

    prompt_text = (
        """
        "Definition: The function receives a list where each element is a tuple consisting of a sentence and a list. 
        The sentence represents the input sentence, and the list contains dictionaries with two keys: 'term' and 'polarity'. 'term' corresponds to a word in the sentence, 
        and 'polarity' represents its sentiment, which can be 'positive', 'negative', or 'neutral'. 
        The function should return a list of strings. Each string should represent a sentence with the same meaning as the input sentence, 
        while ensuring that each term specified by the 'term' key maintains the sentiment indicated by the 'polarity' key. 
        These generated sentences must express the same meaning as the input sentences but in different ways. 
        Double quotes should be used for quoting in the output sentences, and any double quotes within the sentences should be properly escaped. 
        The number of output sentences should be the same as the number of input sentences, ensuring none are missed. I will give you 50 sentences and you must generate 50 snetences.
        The output should be in JSON format and consist of a list of strings in Python format.
    
        Example:
            input: 
            [
                {I charge it at night and skip taking the cord with me because of the good battery life.,
                [{'term': 'cord', 'polarity': 'neutral'}, {'term': 'battery life', 'polarity': 'positive'}]}, 
                {The tech guy then said the service center does not do 1-to-1 exchange and I have to direct my concern to the \"sales\" team, which is the retail shop which I bought my netbook from.,
                [{'term': 'service center', 'polarity': 'negative'}, {'term': '\"sales\" team', 'polarity': 'negative'}, {'term': 'tech guy', 'polarity': 'neutral'}]}
            ]
            
    
        output: {
            output: 
            {'sentences': 
                ['Because the battery life is so good, I just charge it overnight and leave the cord behind.Because the battery life is so good, I just charge it overnight and leave the cord behind.',
                'The tech guy then informed me that the service center does not offer 1-to-1 exchange, and I must address my concerns to the \\\"sales\\\" team, which is the retail shop where I purchased my netbook.']
            }
        }
        The example illustrates that the first input sentence and the first output sentence have the same meaning with a neutral sentiment for the word 'cord' and a positive sentiment for the word 'battery life'. Similarly, the second input sentence and the second output sentence convey the same meaning with a negative sentiment for the word 'service center', a negative sentiment for the word 'sale team', and a neutral sentiment for the word 'tech guy'. The output sentences are generated by the model and must not be the same as the input sentences. The output must consist of a list of strings in Python format, encoded in JSON, without any additional messages.
    
        Here are the 50 input sentences:
        """

    )

    prompt_text = prompt_text + "["

    for t in tuples:
        prompt_text = prompt_text + "{" + f"{t.sentence}, {t.labels}" + "},"

    prompt_text = prompt_text + "]"

    # print(prompt_text)

    # 创建消息对象列表
    messages = [
        {
            "role": "user",
            "content": prompt_text
        }
    ]

    # 调用 OpenAI API
    response = client.chat.completions.create(
        messages=messages,
        model="gpt-3.5-turbo-instruct",
        response_format={"type": "json_object"},
        max_tokens=3000
    )
    return response.choices[0].message.content


t1 = tupe(
    "I even got my teenage son one, because of the features that it offers, like, iChat, Photobooth, garage band and more!",
    [[{'term': 'features', 'polarity': 'positive'}, {'term': 'iChat', 'polarity': 'positive'},
      {'term': 'Photobooth', 'polarity': 'positive'}, {'term': 'garage band', 'polarity': 'positive'}]])

t2 = tupe("Great laptop that offers many great features!",
          [{'term': 'features', 'polarity': 'positive'}])

# tuples = []
# tuples.append(t1)
# tuples.append(t2)

# # 调用API生成句子
# filled_sentence = generate_filled_sentences(tuples)
# # filled_sentence = '["My teenage son even got one, because of the features that it offers, like, iChat, Photobooth, garage band and more!","Great laptop that offers many great features!"]'
#
# # print('["My teenage son even got one, because of the features that it offers, like, iChat, Photobooth, garage band and more!","Great laptop that offers many great features!"]')
# # 将单引号替换为双引号
# print(filled_sentence)
# strs = json.loads(filled_sentence)
# for item in strs:
#     print(item)

# Load the data
train_file_path = './Dataset/SemEval14/Train/Laptops_Train.csv'
tr_df = pd.read_csv(train_file_path)
tr_size = len(tr_df['raw_text'])

new_df = pd.DataFrame(columns=['raw_text', 'aspectTerms', 'aspectCategories'])


# new_df = pd.read_csv('./Dataset/SemEval14/Train/Laptops_Train_new_2.csv')

# df1 = pd.DataFrame({'raw_text': [
#     "Because the good battery life, I charge it at night and leave the cord behind.Because the good battery life, I charge it at night and leave the cord behind."],
#     'aspectTerms': ["{'term': 'battery life', 'polarity': 'positive'}"],
#     'aspectCategories': ["{'category': 'battery life', 'polarity': 'positive'}"]})
#
# new_df = pd.merge(new_df, df1, how='outer')
#
#
# s = pd.DataFrame({'raw_text': ["a"],
#                   'aspectTerms': ["b"],
#                   'aspectCategories': ["c"]})
#
# new_df = pd.merge(new_df, s, how='outer')
# new_df.to_csv('./Dataset/SemEval14/Train/Laptops_Train_new.csv', sep=',', index=False, header=True)

# print(new_df)

def extract_values(json_data):
    values = []
    # 解析JSON数据
    data = json.loads(json_data)

    # 提取所有的value
    def extract(data):
        if isinstance(data, dict):
            for value in data.values():
                extract(value)
        elif isinstance(data, list):
            for item in data:
                extract(item)
        else:
            values.append(data)

    extract(data)
    return values


# js = {'sentences': ['"Because the battery life is so good, I just charge it at night and leave the cord behind."', '"I bought a HP Pavilion DV4-1222nr laptop and have had so many problems with the computer."', '"The tech guy then informed me that the service center does not offer 1-to-1 exchange, and I must address my concerns to the "sales" team, which is the retail shop where I purchased my netbook."', '"I investigated netbooks and saw the Toshiba NB305-N410BL."', '"The other day I had a presentation to do for a seminar at a large conference in town- lots of people, little time to prep and have to set up a computer to a projector, etc."', '"it is of high quality, has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications, is easy to use, and is absolutely gorgeous."', '"Easy to start up and does not overheat as much as other laptops."', '"Sad very SAD."', '"I even got my teenage son one, because of the features that it offers, like, iChat, Photobooth, garage band and more!"', '"Needless to say a PC that can\'t support a cell phone is less than useless!"', '"Great laptop that offers many great features!"', '"they have done absolutely nothing to fix the computer problem."', '"One night I turned the freaking thing off after using it, the next day I turn it on, no GUI, screen all dark, power light steady, hard drive light steady and not flashing as it usually does."', '"Still pretty pricey, but I\'ve been putting off money for a while as a little Macbook Fund, and finally got to use it."', '"I took it back for an Asus and same thing- blue screen which required me to remove the battery to reset."', '"In the shop, these MacBooks are encased in a soft rubber enclosure - so you will never know about the razor edge until you buy it, get it home, break the seal and use it (very clever con)."', '"However, the multi-touch gestures and large tracking area make having an external mouse unnecessary (unless you\'re gaming)."', '"Plus it is small and reasonably light so I can take it with me to and from work."', '"I HATE this one."', '"They were totally unconcerned that the computer was not correctly repaired in the first place."', '"Toshiba does not send any one out unless you have paid extra to have the on site repair done."', '"Oh, boy!"', '"But while this is one big advantage (as you may know from the company s recent commercials) there are other things to consider before going with Apple."', '"I love the way the entire suite of software works together."', '"The speed is incredible and I am more than satisfied."', '"on the bright side at least I wasn\'t without my laptop for long this time!"', '"This laptop meets every expectation and Windows 7 is great!"', '"That\'s how frustrating it was."', '"I can barely use any usb devices because they will not stay connected properly."', '"The one down side to it is that when I play a certin game on here, it tends to freeze up sometimes, but thats the only bad thing about this computer."', '"-No backlit keyboard, but not an issue for me."', '"When I finally had everything running with all my software installed I plugged in my droid to recharge and the system crashed."', '"I can\'t even turn it off."', '"One suggestion I do have, is to not bother getting Microsoft office for the mac expecting it will work just like you knew it to on a PC."', '"Pairing it with an iPhone is a pure pleasure - talk about painless syncing - used to take me forever - now it\'s a snap."', '"I shopped around before buying."', '"I also got the added bonus of a 30" HD Monitor, which really helps to extend my screen and keep my eyes fresh!"', '"Would do business again."', '"The machine is slow to boot up and occasionally crashes completely."', '"After paying several hundred dollars for this service, it is frustrating that you cannot get help after hours."', '"I have had the luxury (sarcasm) of owning 2 of these laptops."', '"What a waste."', '"It was a total Dhell experience that I will never repeat."', '"There are a few flaws as well that I noticed."', '"Completely worth every single penny dime and nickel."', '"I tried to upgrade it to a newer version a couple of months ago and I still have the same problem."', '"I did have to replace the battery once, but that was only a couple months ago and it\'s been working perfect ever since."', '":) In the past four years I\'ve had it I have never once gotten a virus."', '"I love the operating system and the preloaded software."', '"They were great in handling this problem, and I\'m looking forward in purchasing additonal products from them in the future."']}
# kvs = extract_values(js)
# for kv in kvs:
#     print(kv)

# all done
for i in range(0, 300, 50):
    tuples = []
    for j in range(i, min(i + 50, tr_size)):
        sentence = tr_df['raw_text'][j]
        labels = tr_df['aspectTerms'][j]
        t = tupe(sentence, labels)
        tuples.append(t)
    filled_sentences = generate_filled_sentences(tuples)
    print(filled_sentences)
    # try:
    #     strs = json.loads(filled_sentences)
    # except Exception as e:
    #     print(f"error: {i}, {e}")
    #     continue
    # print(strs)
    strs = extract_values(filled_sentences)
    # print(strs)
    for j in range(i, min(i + 50, tr_size)):
        if strs[j - i] == tuples[j - i].sentence:
            print(f"same: {j}")
            continue
        raw_df = pd.DataFrame({'raw_text': [strs[j - i]],
                               'aspectTerms': [tr_df['aspectTerms'][j]],
                               'aspectCategories': [tr_df['aspectCategories'][j]]})
        new_df = pd.merge(new_df, raw_df, how='outer')
    print(len(new_df))
    print(f"from {i} to {min(i + 50, tr_size)}")
    time.sleep(30)

new_df.to_csv('./Dataset/SemEval14/Train/Laptops_Train_new_2.csv', sep=',', index=False, header=True)

# new_df.to_csv('./Dataset/SemEval14/Train/Laptops_Train_new.csv',sep=',',index=False,header=True)

# ["Because the good battery life, I charge it at night and leave the cord behind.Because the good battery life, I charge it at night and leave the cord behind.",
# "I encountered so many issues with the HP Pavilion DV4-1222nr laptop I purchased.I encountered so many issues with the HP Pavilion DV4-1222nr laptop I purchased.",
# "The tech guy then informed me that the service center does not offer 1-to-1 exchange, and I must address my concerns to the "sales" team, which is the retail shop where I purchased my netbook.The tech guy then informed me that the service center does not offer 1-to-1 exchange, and I must address my concerns to the "sales" team, which is the retail shop where I purchased my netbook.",
# "I checked out netbooks and saw the Toshiba NB305-N410BL.I checked out netbooks and saw the Toshiba NB305-N410BL.",
# "The other day I had a presentation to do for a seminar at a large conference in town- lots of people, little time to prep and have to set up a computer to a projector, etc.The other day I had a presentation to do for a seminar at a large conference in town- lots of people, little time to prep and have to set up a computer to a projector, etc.",
# "It is of high quality, has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications, is easy to use, and is absolutely gorgeous.It is of high quality, has a killer GUI, is extremely stable, is highly expandable, is bundled with lots of very good applications, is easy to use, and is absolutely gorgeous.",
# "Easy to get going and does not overheat as much as other laptops.Easy to get going and does not overheat as much as other laptops.",
# "Feeling very disappointed.Feeling very disappointed.",
# "I even got my teenage son one, because of the features that it offers, like, iChat, Photobooth, garage band and more!I even got my teenage son one, because of the features that it offers, like, iChat, Photobooth, garage band and more.",
# "Needless to say a PC that can't support a cell phone is less than useless!Needless to say a PC that can't support a cell phone is less than useless!"]
